#include "opaque_test_driver.h"

#include <string.h>
#include <ctype.h>

/* Parameter validation macros */
#define OPQTD_VALIDATE_RET( cond ) \
    MBEDTLS_INTERNAL_VALIDATE_RET( cond, PSA_ERROR_INVALID_ARGUMENT )
#define OPQTD_VALIDATE( cond ) \
    MBEDTLS_INTERNAL_VALIDATE( cond )


static void rot13(const uint8_t *in, size_t len, uint8_t *out)
{
  char c;
  while (len--) {
     c = (char)*in;
     *out = isalpha(c) ? tolower(c) < 'n' ? c+13 : c-13 : c;
     in++;
     out++;
  }
}

psa_status_t opaque_test_driver_export_public_key(const uint8_t *in,
                                                  size_t        in_length,
                                                  uint8_t       *out,
                                                  size_t        out_size,
                                                  size_t        *out_length)
{
  OPQTD_VALIDATE_RET(in         != NULL);
  OPQTD_VALIDATE_RET(out        != NULL);
  OPQTD_VALIDATE_RET(out_length != NULL);

  if (in_length <= OPAQUE_TEST_DRIVER_KEYHEADER_SIZE) {
    return PSA_ERROR_INVALID_ARGUMENT;
  }

  if (in_length - OPAQUE_TEST_DRIVER_KEYHEADER_SIZE > out_size) {
    return PSA_ERROR_BUFFER_TOO_SMALL;
  }

  *out_length = in_length - OPAQUE_TEST_DRIVER_KEYHEADER_SIZE;
  rot13(in + OPAQUE_TEST_DRIVER_KEYHEADER_SIZE, *out_length, out);

  return PSA_SUCCESS;
}

psa_status_t opaque_test_driver_import_key(const psa_key_attributes_t *attributes,
                                           const uint8_t              *in,
                                           size_t                     in_length,
                                           uint8_t                    *out,
                                           size_t                     out_size,
                                           size_t                     *out_length)
{
  OPQTD_VALIDATE_RET(attributes != NULL);
  OPQTD_VALIDATE_RET(in         != NULL);
  OPQTD_VALIDATE_RET(out        != NULL);
  OPQTD_VALIDATE_RET(out_length != NULL);

  if (psa_get_key_type(attributes) != PSA_KEY_TYPE_AES) {
    return PSA_ERROR_NOT_SUPPORTED;
  }

  if ((psa_get_key_bits(attributes) != 128)          // AES-128
      && (psa_get_key_bits(attributes) != 192)       // AES-192
      && (psa_get_key_bits(attributes) != 256)) {    // AES-256
    return PSA_ERROR_NOT_SUPPORTED;
  }

  if (psa_get_key_bits(attributes) != PSA_BYTES_TO_BITS(in_length)) {
    return PSA_ERROR_INVALID_ARGUMENT;
  }

  if (OPAQUE_TEST_DRIVER_KEYHEADER_SIZE + in_length > out_size) {
    return PSA_ERROR_BUFFER_TOO_SMALL;
  }

  strcpy((char*)out, OPAQUE_TEST_DRIVER_KEYHEADER);

  // Obscure key slightly.
  rot13(in, in_length, out + OPAQUE_TEST_DRIVER_KEYHEADER_SIZE);

  *out_length = in_length + OPAQUE_TEST_DRIVER_KEYHEADER_SIZE;

  return PSA_SUCCESS;
}

psa_status_t opaque_test_driver_generate_key(const psa_key_attributes_t *attributes,
                                             uint8_t                    *data,
                                             size_t                     data_size,
                                             size_t                     *data_length)
{
  uint8_t key[32];
  size_t key_length;
  psa_status_t status;

  OPQTD_VALIDATE_RET(attributes  != NULL);
  OPQTD_VALIDATE_RET(data        != NULL);
  OPQTD_VALIDATE_RET(data_length != NULL);

  if (psa_get_key_bits(attributes) == 0) {
    return PSA_ERROR_INVALID_ARGUMENT;
  }

  if (psa_get_key_type(attributes) != PSA_KEY_TYPE_AES) {
    return PSA_ERROR_NOT_SUPPORTED;
  }

  if ((psa_get_key_bits(attributes) != 128)          // AES-128
      && (psa_get_key_bits(attributes) != 192)       // AES-192
      && (psa_get_key_bits(attributes) != 256)) {    // AES-256
    return PSA_ERROR_NOT_SUPPORTED;
  }

  if (OPAQUE_TEST_DRIVER_KEYHEADER_SIZE
      + PSA_BITS_TO_BYTES(psa_get_key_bits(attributes)) > data_size) {
    return PSA_ERROR_BUFFER_TOO_SMALL;
  }

  // Generate key data.
  key_length = PSA_BITS_TO_BYTES(psa_get_key_bits(attributes));
  status = psa_generate_random(key, key_length);
  if (status != PSA_SUCCESS) {
    return status;
  }

  return opaque_test_driver_import_key(attributes,
                                       key,
                                       key_length,
                                       data,
                                       data_size,
                                       data_length);
}
