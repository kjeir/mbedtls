/* BEGIN_HEADER */
#include "suites/opaque_test_driver.function"
/* END_HEADER */

/* BEGIN_CASE depends_on:MBEDTLS_CHECK_PARAMS:!MBEDTLS_PARAM_FAILED_ALT */
void opaque_test_driver_invalid_param( )
{
  uint8_t in_key[16];
  uint8_t out_key[16 + strlen(OPAQUE_TEST_DRIVER_KEYHEADER)];
  size_t out_key_len;
  psa_key_attributes_t attr;
  attr.core.type = PSA_KEY_TYPE_AES;
  attr.core.bits = 128;

  // Check validity of parameter set.
  TEST_ASSERT(PSA_SUCCESS == opaque_test_driver_import_key(&attr,
                                                           in_key,
                                                           16,
                                                           out_key,
                                                           16 + strlen(OPAQUE_TEST_DRIVER_KEYHEADER),
                                                           &out_key_len));
  TEST_INVALID_PARAM_RET(PSA_ERROR_INVALID_ARGUMENT,
                         opaque_test_driver_import_key(NULL,
                                                       in_key,
                                                       16,
                                                       out_key,
                                                       16 + strlen(OPAQUE_TEST_DRIVER_KEYHEADER),
                                                       &out_key_len));
  TEST_INVALID_PARAM_RET(PSA_ERROR_INVALID_ARGUMENT,
                         opaque_test_driver_import_key(&attr,
                                                       NULL,
                                                       16,
                                                       out_key,
                                                       16 + strlen(OPAQUE_TEST_DRIVER_KEYHEADER),
                                                       &out_key_len));
  TEST_INVALID_PARAM_RET(PSA_ERROR_INVALID_ARGUMENT,
                         opaque_test_driver_import_key(&attr,
                                                       in_key,
                                                       16,
                                                       NULL,
                                                       16 + strlen(OPAQUE_TEST_DRIVER_KEYHEADER),
                                                       &out_key_len));
  TEST_INVALID_PARAM_RET(PSA_ERROR_INVALID_ARGUMENT,
                         opaque_test_driver_import_key(&attr,
                                                       in_key,
                                                       16,
                                                       out_key,
                                                       16 + strlen(OPAQUE_TEST_DRIVER_KEYHEADER),
                                                       NULL));

exit:
  return;
}
/* END_CASE */

/* BEGIN_CASE */
void opaque_test_driver_bad_param( )
{
  uint8_t in_key[16];
  uint8_t out_key[16 + strlen(OPAQUE_TEST_DRIVER_KEYHEADER)];
  size_t out_key_len;
  psa_key_attributes_t attr;
  attr.core.type = PSA_KEY_TYPE_AES;
  attr.core.bits = 128;

  // Check validity of parameter set.
  TEST_ASSERT(PSA_SUCCESS == opaque_test_driver_import_key(&attr,
                                                           in_key,
                                                           16,
                                                           out_key,
                                                           16 + strlen(OPAQUE_TEST_DRIVER_KEYHEADER),
                                                           &out_key_len));

  attr.core.type = PSA_KEY_TYPE_ARC4;
  TEST_ASSERT(PSA_ERROR_NOT_SUPPORTED == opaque_test_driver_import_key(&attr,
                                                           in_key,
                                                           16,
                                                           out_key,
                                                           16 + strlen(OPAQUE_TEST_DRIVER_KEYHEADER),
                                                           &out_key_len));
  attr.core.type = PSA_KEY_TYPE_AES;

  attr.core.bits = 129;
  TEST_ASSERT(PSA_ERROR_NOT_SUPPORTED == opaque_test_driver_import_key(&attr,
                                                           in_key,
                                                           16,
                                                           out_key,
                                                           16 + strlen(OPAQUE_TEST_DRIVER_KEYHEADER),
                                                           &out_key_len));
  attr.core.bits = 128;

  TEST_ASSERT(PSA_ERROR_INVALID_ARGUMENT == opaque_test_driver_import_key(&attr,
                                                           in_key,
                                                           17,
                                                           out_key,
                                                           16 + strlen(OPAQUE_TEST_DRIVER_KEYHEADER),
                                                           &out_key_len));

  TEST_ASSERT(PSA_ERROR_BUFFER_TOO_SMALL == opaque_test_driver_import_key(&attr,
                                                           in_key,
                                                           16,
                                                           out_key,
                                                           15 + strlen(OPAQUE_TEST_DRIVER_KEYHEADER),
                                                           &out_key_len));
exit:
  return;
}
/* END_CASE */
