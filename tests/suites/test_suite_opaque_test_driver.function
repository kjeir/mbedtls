/* BEGIN_HEADER */
#include "mbedtls/gcm.h"
/* END_HEADER */

/* BEGIN_CASE depends_on:MBEDTLS_CHECK_PARAMS:!MBEDTLS_PARAM_FAILED_ALT */
void opaque_test_driver_invalid_param( )
{
    mbedtls_gcm_context ctx;
    unsigned char valid_buffer[] = { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06 };
    mbedtls_cipher_id_t valid_cipher = MBEDTLS_CIPHER_ID_AES;
    int valid_mode = MBEDTLS_GCM_ENCRYPT;
    int valid_len = sizeof(valid_buffer);
    int valid_bitlen = 128, invalid_bitlen = 1;

    mbedtls_gcm_init( &ctx );

    mbedtls_fprintf( stdout, "---PASSED---" );
    mbedtls_fprintf( stderr, "---PASSED---" );

    /* mbedtls_gcm_init() */
    TEST_INVALID_PARAM( mbedtls_gcm_init( NULL ) );

    /* mbedtls_gcm_setkey */
    TEST_INVALID_PARAM_RET(
        MBEDTLS_ERR_GCM_BAD_INPUT,
        mbedtls_gcm_setkey( NULL, valid_cipher, valid_buffer, valid_bitlen ) );
    TEST_INVALID_PARAM_RET(
        MBEDTLS_ERR_GCM_BAD_INPUT,
        mbedtls_gcm_setkey( &ctx, valid_cipher, NULL, valid_bitlen ) );
    TEST_INVALID_PARAM_RET(
        MBEDTLS_ERR_GCM_BAD_INPUT,
        mbedtls_gcm_setkey( &ctx, valid_cipher, valid_buffer, invalid_bitlen ) );

    /* mbedtls_gcm_crypt_and_tag() */
    TEST_INVALID_PARAM_RET(
        MBEDTLS_ERR_GCM_BAD_INPUT,
        mbedtls_gcm_crypt_and_tag( NULL, valid_mode, valid_len,
                                   valid_buffer, valid_len,
                                   valid_buffer, valid_len,
                                   valid_buffer, valid_buffer,
                                   valid_len, valid_buffer ) );
    TEST_INVALID_PARAM_RET(
        MBEDTLS_ERR_GCM_BAD_INPUT,
        mbedtls_gcm_crypt_and_tag( &ctx, valid_mode, valid_len,
                                   NULL, valid_len,
                                   valid_buffer, valid_len,
                                   valid_buffer, valid_buffer,
                                   valid_len, valid_buffer ) );
    TEST_INVALID_PARAM_RET(
        MBEDTLS_ERR_GCM_BAD_INPUT,
        mbedtls_gcm_crypt_and_tag( &ctx, valid_mode, valid_len,
                                   valid_buffer, valid_len,
                                   NULL, valid_len,
                                   valid_buffer, valid_buffer,
                                   valid_len, valid_buffer ) );
    TEST_INVALID_PARAM_RET(
        MBEDTLS_ERR_GCM_BAD_INPUT,
        mbedtls_gcm_crypt_and_tag( &ctx, valid_mode, valid_len,
                                   valid_buffer, valid_len,
                                   valid_buffer, valid_len,
                                   NULL, valid_buffer,
                                   valid_len, valid_buffer ) );
    TEST_INVALID_PARAM_RET(
        MBEDTLS_ERR_GCM_BAD_INPUT,
        mbedtls_gcm_crypt_and_tag( &ctx, valid_mode, valid_len,
                                   valid_buffer, valid_len,
                                   valid_buffer, valid_len,
                                   valid_buffer, NULL,
                                   valid_len, valid_buffer ) );
    TEST_INVALID_PARAM_RET(
        MBEDTLS_ERR_GCM_BAD_INPUT,
        mbedtls_gcm_crypt_and_tag( &ctx, valid_mode, valid_len,
                                   valid_buffer, valid_len,
                                   valid_buffer, valid_len,
                                   valid_buffer, valid_buffer,
                                   valid_len, NULL ) );

    /* mbedtls_gcm_auth_decrypt() */
    TEST_INVALID_PARAM_RET(
        MBEDTLS_ERR_GCM_BAD_INPUT,
        mbedtls_gcm_auth_decrypt( NULL, valid_len,
                                  valid_buffer, valid_len,
                                  valid_buffer, valid_len,
                                  valid_buffer, valid_len,
                                  valid_buffer, valid_buffer) );
    TEST_INVALID_PARAM_RET(
        MBEDTLS_ERR_GCM_BAD_INPUT,
        mbedtls_gcm_auth_decrypt( &ctx, valid_len,
                                  NULL, valid_len,
                                  valid_buffer, valid_len,
                                  valid_buffer, valid_len,
                                  valid_buffer, valid_buffer) );
    TEST_INVALID_PARAM_RET(
        MBEDTLS_ERR_GCM_BAD_INPUT,
        mbedtls_gcm_auth_decrypt( &ctx, valid_len,
                                  valid_buffer, valid_len,
                                  NULL, valid_len,
                                  valid_buffer, valid_len,
                                  valid_buffer, valid_buffer) );
    TEST_INVALID_PARAM_RET(
        MBEDTLS_ERR_GCM_BAD_INPUT,
        mbedtls_gcm_auth_decrypt( &ctx, valid_len,
                                  valid_buffer, valid_len,
                                  valid_buffer, valid_len,
                                  NULL, valid_len,
                                  valid_buffer, valid_buffer) );
    TEST_INVALID_PARAM_RET(
        MBEDTLS_ERR_GCM_BAD_INPUT,
        mbedtls_gcm_auth_decrypt( &ctx, valid_len,
                                  valid_buffer, valid_len,
                                  valid_buffer, valid_len,
                                  valid_buffer, valid_len,
                                  NULL, valid_buffer) );
    TEST_INVALID_PARAM_RET(
        MBEDTLS_ERR_GCM_BAD_INPUT,
        mbedtls_gcm_auth_decrypt( &ctx, valid_len,
                                  valid_buffer, valid_len,
                                  valid_buffer, valid_len,
                                  valid_buffer, valid_len,
                                  valid_buffer, NULL) );

    /* mbedtls_gcm_starts() */
    TEST_INVALID_PARAM_RET(
        MBEDTLS_ERR_GCM_BAD_INPUT,
        mbedtls_gcm_starts( NULL, valid_mode,
                            valid_buffer, valid_len,
                            valid_buffer, valid_len ) );

    TEST_INVALID_PARAM_RET(
        MBEDTLS_ERR_GCM_BAD_INPUT,
        mbedtls_gcm_starts( &ctx, valid_mode,
                            NULL, valid_len,
                            valid_buffer, valid_len ) );

    TEST_INVALID_PARAM_RET(
        MBEDTLS_ERR_GCM_BAD_INPUT,
        mbedtls_gcm_starts( &ctx, valid_mode,
                            valid_buffer, valid_len,
                            NULL, valid_len ) );

    /* mbedtls_gcm_update() */
    TEST_INVALID_PARAM_RET(
        MBEDTLS_ERR_GCM_BAD_INPUT,
        mbedtls_gcm_update( NULL, valid_len,
                            valid_buffer, valid_buffer ) );
    TEST_INVALID_PARAM_RET(
        MBEDTLS_ERR_GCM_BAD_INPUT,
        mbedtls_gcm_update( &ctx, valid_len,
                            NULL, valid_buffer ) );
    TEST_INVALID_PARAM_RET(
        MBEDTLS_ERR_GCM_BAD_INPUT,
        mbedtls_gcm_update( &ctx, valid_len,
                            valid_buffer, NULL ) );

    /* mbedtls_gcm_finish() */
    TEST_INVALID_PARAM_RET(
        MBEDTLS_ERR_GCM_BAD_INPUT,
        mbedtls_gcm_finish( NULL, valid_buffer, valid_len ) );
    TEST_INVALID_PARAM_RET(
        MBEDTLS_ERR_GCM_BAD_INPUT,
        mbedtls_gcm_finish( &ctx, NULL, valid_len ) );

exit:
    mbedtls_gcm_free( &ctx );
}
/* END_CASE */
