/* BEGIN_HEADER */
#include "suites/opaque_test_driver.function"
/* END_HEADER */

/* BEGIN_CASE depends_on:MBEDTLS_CHECK_PARAMS:!MBEDTLS_PARAM_FAILED_ALT */
void opaque_test_driver_invalid_param()
{
  size_t out_key_len;
  uint8_t in_key[16];
  psa_key_attributes_t attr = PSA_KEY_ATTRIBUTES_INIT;
  uint8_t out_key[16 + strlen(OPAQUE_TEST_DRIVER_KEYHEADER)];

  psa_set_key_type(&attr, PSA_KEY_TYPE_AES);
  psa_set_key_bits(&attr, 128);

  // Check validity of parameter set.
  TEST_ASSERT(PSA_SUCCESS == opaque_test_driver_import_key(&attr,
                                                           in_key,
                                                           16,
                                                           out_key,
                                                           16 + strlen(OPAQUE_TEST_DRIVER_KEYHEADER),
                                                           &out_key_len));
  TEST_INVALID_PARAM_RET(PSA_ERROR_INVALID_ARGUMENT,
                         opaque_test_driver_import_key(NULL,
                                                       in_key,
                                                       16,
                                                       out_key,
                                                       16 + strlen(OPAQUE_TEST_DRIVER_KEYHEADER),
                                                       &out_key_len));
  TEST_INVALID_PARAM_RET(PSA_ERROR_INVALID_ARGUMENT,
                         opaque_test_driver_import_key(&attr,
                                                       NULL,
                                                       16,
                                                       out_key,
                                                       16 + strlen(OPAQUE_TEST_DRIVER_KEYHEADER),
                                                       &out_key_len));
  TEST_INVALID_PARAM_RET(PSA_ERROR_INVALID_ARGUMENT,
                         opaque_test_driver_import_key(&attr,
                                                       in_key,
                                                       16,
                                                       NULL,
                                                       16 + strlen(OPAQUE_TEST_DRIVER_KEYHEADER),
                                                       &out_key_len));
  TEST_INVALID_PARAM_RET(PSA_ERROR_INVALID_ARGUMENT,
                         opaque_test_driver_import_key(&attr,
                                                       in_key,
                                                       16,
                                                       out_key,
                                                       16 + strlen(OPAQUE_TEST_DRIVER_KEYHEADER),
                                                       NULL));

exit:
  return;
}
/* END_CASE */

/* BEGIN_CASE */
void opaque_test_driver_bad_param()
{
  size_t out_key_len;
  uint8_t in_key[16];
  psa_key_attributes_t attr = PSA_KEY_ATTRIBUTES_INIT;
  uint8_t out_key[16 + strlen(OPAQUE_TEST_DRIVER_KEYHEADER)];

  psa_set_key_type(&attr, PSA_KEY_TYPE_AES);
  psa_set_key_bits(&attr, 128);

  // Check validity of parameter set.
  TEST_ASSERT(PSA_SUCCESS == opaque_test_driver_import_key(&attr,
                                                           in_key,
                                                           16,
                                                           out_key,
                                                           16 + strlen(OPAQUE_TEST_DRIVER_KEYHEADER),
                                                           &out_key_len));

  attr.core.type = PSA_KEY_TYPE_ARC4;
  TEST_ASSERT(PSA_ERROR_NOT_SUPPORTED == opaque_test_driver_import_key(&attr,
                                                           in_key,
                                                           16,
                                                           out_key,
                                                           16 + strlen(OPAQUE_TEST_DRIVER_KEYHEADER),
                                                           &out_key_len));
  attr.core.type = PSA_KEY_TYPE_AES;

  attr.core.bits = 129;
  TEST_ASSERT(PSA_ERROR_NOT_SUPPORTED == opaque_test_driver_import_key(&attr,
                                                           in_key,
                                                           16,
                                                           out_key,
                                                           16 + strlen(OPAQUE_TEST_DRIVER_KEYHEADER),
                                                           &out_key_len));
  attr.core.bits = 128;

  TEST_ASSERT(PSA_ERROR_INVALID_ARGUMENT == opaque_test_driver_import_key(&attr,
                                                           in_key,
                                                           17,
                                                           out_key,
                                                           16 + strlen(OPAQUE_TEST_DRIVER_KEYHEADER),
                                                           &out_key_len));

  TEST_ASSERT(PSA_ERROR_BUFFER_TOO_SMALL == opaque_test_driver_import_key(&attr,
                                                           in_key,
                                                           16,
                                                           out_key,
                                                           15 + strlen(OPAQUE_TEST_DRIVER_KEYHEADER),
                                                           &out_key_len));
exit:
  return;
}
/* END_CASE */

/* BEGIN_CASE */
void opaque_test_driver_generate_key(int type_arg, int bits_arg)
{
  size_t key_len = 0;
  uint8_t key[32 + strlen(OPAQUE_TEST_DRIVER_KEYHEADER)];
  psa_key_attributes_t attributes = PSA_KEY_ATTRIBUTES_INIT;

  psa_set_key_usage_flags(&attributes, PSA_KEY_USAGE_EXPORT);
  psa_set_key_type(&attributes, type_arg);
  psa_set_key_bits(&attributes, bits_arg);

  TEST_ASSERT(PSA_SUCCESS == psa_crypto_init());
  TEST_ASSERT(PSA_SUCCESS == opaque_test_driver_generate_key(&attributes,
                               key,
                               32 + strlen(OPAQUE_TEST_DRIVER_KEYHEADER),
                               &key_len));

  mbedtls_fprintf(stdout, "\nGenerated key,   len:%lu data:", key_len);
  for (unsigned i = 0; i < key_len; i++) {
    if (isalpha(key[i])) {
      mbedtls_fprintf(stdout, "'%c' ", key[i]);
    } else {
      mbedtls_fprintf(stdout, "%02X ", key[i]);
    }
  }
  mbedtls_fprintf(stdout, "\n");

exit:
  mbedtls_psa_crypto_free();
}
/* END_CASE */

/* BEGIN_CASE */
void opaque_test_driver_import_key(char *key_material)
{
  size_t out_key_len = 0;
  psa_key_attributes_t attr = PSA_KEY_ATTRIBUTES_INIT;
  uint8_t out_key1[32 + strlen(OPAQUE_TEST_DRIVER_KEYHEADER) + 1];
  uint8_t out_key2[32 + strlen(OPAQUE_TEST_DRIVER_KEYHEADER) + 1];

  // --- Figure out if we should set usage & alg attributes ---
  // psa_set_key_usage_flags(&attributes, PSA_KEY_USAGE_ENCRYPT | PSA_KEY_USAGE_DECRYPT);
  // psa_set_key_algorithm(&attributes, alg);

  psa_set_key_type(&attr, PSA_KEY_TYPE_AES);
  psa_set_key_bits(&attr, PSA_BYTES_TO_BITS(strlen(key_material)));

  TEST_ASSERT(strlen(key_material) <= 32);
  mbedtls_fprintf(stdout, "\nInput key,       len:%lu data:'%s'\n", strlen(key_material), key_material);

  // Import key.
  TEST_ASSERT(PSA_SUCCESS == opaque_test_driver_import_key(&attr,
                                                           (uint8_t*)key_material,
                                                           strlen(key_material),
                                                           out_key1,
                                                           strlen(key_material) + strlen(OPAQUE_TEST_DRIVER_KEYHEADER),
                                                           &out_key_len));

  TEST_ASSERT(strlen(key_material) + strlen(OPAQUE_TEST_DRIVER_KEYHEADER) == out_key_len);
  out_key1[out_key_len] = '\0';
  mbedtls_fprintf(stdout, "Imported key,    len:%lu data:'%s'\n", strlen((char*)out_key1), out_key1);

  // Import the "imported" key (less key header).
  TEST_ASSERT(PSA_SUCCESS == opaque_test_driver_import_key(&attr,
                                                           out_key1 + strlen(OPAQUE_TEST_DRIVER_KEYHEADER),
                                                           strlen((char*)out_key1 + strlen(OPAQUE_TEST_DRIVER_KEYHEADER)),
                                                           out_key2,
                                                           strlen((char*)out_key1 + strlen(OPAQUE_TEST_DRIVER_KEYHEADER))
                                                           + strlen(OPAQUE_TEST_DRIVER_KEYHEADER),
                                                           &out_key_len));

  TEST_ASSERT(strlen((char*)out_key1 + strlen(OPAQUE_TEST_DRIVER_KEYHEADER))
              + strlen(OPAQUE_TEST_DRIVER_KEYHEADER) == out_key_len);
  out_key2[out_key_len] = '\0';
  mbedtls_fprintf(stdout, "Re-imported key, len:%lu data:'%s'\n", strlen((char*)out_key2), out_key2);

  // The keys should be equal when ignoring key header.
  TEST_ASSERT(0 == mbedtls_test_hexcmp((uint8_t*)key_material,
                                       out_key2 + strlen(OPAQUE_TEST_DRIVER_KEYHEADER),
                                       strlen(key_material),
                                       strlen((char*)out_key2 + strlen(OPAQUE_TEST_DRIVER_KEYHEADER))));

exit:
  return;
}
/* END_CASE */
